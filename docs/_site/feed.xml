<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-02T00:03:44+03:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Singular Voice</title><subtitle>Thoughts of a software engineer that abandoned from his favorite world</subtitle><author><name>Amir</name></author><entry><title type="html">The Shield Against Backend Turbulence</title><link href="http://localhost:4000/future-proof-our-app.html" rel="alternate" type="text/html" title="The Shield Against Backend Turbulence" /><published>2024-01-01T20:00:00+03:30</published><updated>2024-01-01T20:00:00+03:30</updated><id>http://localhost:4000/future-proof-our-app</id><content type="html" xml:base="http://localhost:4000/future-proof-our-app.html"><![CDATA[<section>
    <p>You push a new update, and your app is shining—until the backend team updates their APIs. Now, your app's
        features start breaking. What if there was a way to shield your app from such disruptions? This isn't about
        overhauling your entire architecture overnight; it's about starting with a single, manageable step drawn from
        Uncle Bob's Clean Architecture principles.</p>
</section>

<section>
    <h4>Context and Background:</h4>
    <p>Implementing the full spectrum of Clean Architecture can seem daunting, and that's not our goal today. Instead,
        let's tackle one specific pain point: the ripple effect of changes in the Backend API layer. It's a simple task,
        a starting point for bigger things.</p>
</section>
<section>
    <h4>Why This First Step Matters:</h4>
    <ul>
        <li>It directly addresses the immediate pain of backend changes forcing unwanted frontend revisions.</li>
        <li>It sets the foundation for a more resilient and flexible app architecture.</li>
        <li>It's an attainable goal, regardless of the size or stage of your project.</li>
    </ul>
</section>
<section>
    <h2 class="mt-4">The Solution: Abstraction and Adapter Layer:</h2>
    <p>To create an app that stands independent of backend fluctuations, we need a shield—an adapter layer that
        abstracts away the backend's Request DTOs and Response DTOs.</p>
    <h4>Before the Adapter Layer:</h4>
    <p>
        Here's a familiar scene: our app's user profile fetch function breaks with a backend change.
    </p>
    <pre>
        <code>
            javascriptCopy code
import React, { useState, useEffect } from 'react';

interface UserProfile {
  id: string;
  name: string;
  email: string;
  // ... other properties exactly as they come from the API
}

const UserProfileComponent: React.FC<{ userId: string }> = ({ userId }) => {
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const response = await fetch(`https://api.example.com/users/${userId}`);
        const userProfile: UserProfile = await response.json();
        setUserProfile(userProfile);
      } catch (error) {
        console.error("Failed to fetch user profile:", error);
      }
    };

    fetchUserProfile();
  }, [userId]);

if (!userProfile) {
    return //SomeLoading
  }

  return //SomeComponent
};

export default UserProfileComponent;

        </code>
    </pre>

    <h4>Introducing the Adapter Layer:</h4>
    <p>
        Now, let's isolate our app with its own data models. Check out this approach:
    </p>
    <pre>

        <code>
            javascriptCopy code

// UserApiClientService handles the API calls
class UserApiClientService {
  private baseUrl: string;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  async fetchProfile(userId: string): Promise<UserApiProfile> {
    const response = await fetch(`${this.baseUrl}/users/${userId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch user profile');
    }
    return response.json();
  }
}

// UserApiAdapterService converts between API and App models
class UserApiAdapterService {
  static fromApiProfile(apiProfile: UserApiProfile): AppUserProfile {
    return {
      id: apiProfile.user_id,
      fullName: `${apiProfile.first_name} ${apiProfile.last_name}`,
      emailAddress: apiProfile.email,
      // ... other conversions
    };
  }
}

// UserApiProfile reflects the API response structure
interface UserApiProfile {
  user_id: string;
  first_name: string;
  last_name: string;
  email: string;
  // ... other properties as they come from the API
}

// AppUserProfile reflects the app's internal model structure
interface AppUserProfile {
  id: string;
  fullName: string;
  emailAddress: string;
  // ... other properties as needed by the app
}

const UserProfileComponent: React.FC<{ userId: string }> = ({ userId }) => {
  const [userProfile, setUserProfile] = useState<AppUserProfile | null>(null);
  const apiClient = new UserApiClientService('https://api.example.com');

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const userApiProfile = await apiClient.fetchProfile(userId);
        const appUserProfile = UserApiAdapterService.fromApiProfile(userApiProfile);
        setUserProfile(appUserProfile);
      } catch (error) {
        console.error("Failed to fetch user profile:", error);
      }
    };

    fetchUserProfile();
  }, [userId, apiClient]);

  if (!userProfile) {
    return //SomeLoading
  }

  return //SomeComponent
};

export default UserProfileComponent;

        </code>
    </pre>
    As you see, our app now speaks in its own language. Backend DTOs no longer dictate our app's data structure. We
    define our app models, and the adapter layer does the translation work.
    <p></p>

</section>
<section>
    <h4>Applying the Approach:</h4>
    <p>This method is a game-changer for both new and existing projects. It's straightforward and doesn't pile on extra
        work.

        For existing projects already tied to backend models, begin with creating adapter services for your use cases.
        Initially, let these adapters simply pass through the data. This grants you an intermediary layer. Gradually,
        you can evolve your app's models to serve the app's efficiency, not just to mirror the backend.</p>
</section>

<section>
    <h2>Conclusion:
    </h2>
    <p>Starting with an adapter layer might seem like a small step, but it's a leap towards a robust, Clean
        Architecture. It's about making your client app not just independent, but resilient and ready for the
        future.</p>
</section>]]></content><author><name>Amir</name></author><summary type="html"><![CDATA[You push a new update, and your app is shining—until the backend team updates their APIs. Now, your app's features start breaking. What if there was a way to shield your app from such disruptions? This isn't about overhauling your entire architecture overnight; it's about starting with a single, manageable step drawn from Uncle Bob's Clean Architecture principles.]]></summary></entry><entry><title type="html">The Story Behind ‘SingularVoice’</title><link href="http://localhost:4000/story-behind-singularvoice.html" rel="alternate" type="text/html" title="The Story Behind ‘SingularVoice’" /><published>2023-12-20T16:00:00+03:30</published><updated>2023-12-20T16:00:00+03:30</updated><id>http://localhost:4000/story-behind-singularvoice</id><content type="html" xml:base="http://localhost:4000/story-behind-singularvoice.html"><![CDATA[<section>
    <h2>Introduction</h2>
    <p>Have you ever watched "Person of Interest"? It's a show that mixes technology, good and bad, and exciting stories. It's about a super-smart computer, called The Machine, that knows when bad things will happen. This show isn't just fun to watch; it makes you think about important stuff like right and wrong and how tech affects our lives.</p>
</section>

<section>
    <h2>About the Show and The Machine</h2>
    <p>In "Person of Interest," The Machine is a computer built by a smart but mysterious guy named Harold Finch. What's special about The Machine is that it tries to do the right thing. It doesn't just see what people are doing; it helps stop crimes. This is different from what we usually see in shows and movies about computers.</p>
</section>
<section>
    <h2>What The Machine Teaches Us</h2>
    <p>The way The Machine works in the show is really interesting. It doesn't just watch people; it tries to save them. It uses its smarts to stop bad things from happening, with the help of some humans. This part of the story makes us think about questions like how much we should let computers do and what happens when computers make big decisions.</p>
</section>
<section>
    <h2>Why I Chose 'SingularVoice'</h2>
    <p>I picked the name "SingularVoice" because of this show. It comes from a powerful line in the last episode: <b style="color: #192A4A">"If you can hear this, you're alone. The only thing left of me is the sound of my voice."</b> This line is about how what we say and do can last a long time and affect others even when we're not around.
        "SingularVoice" means a lot to me. It reminds me of how technology and doing the right thing are both important. On my blog, I want to talk about tech stuff in a way that's thoughtful and personal, just like The Machine.
    </p>
</section>
<section>
    <h2>Conclusion</h2>
    <p>So that's the story of 'SingularVoice.' It's a way for me to remember a show that changed how I think about technology. On my blog, I'll be exploring all sorts of ideas about tech, how we use it, and what it means to be human, just like the show did.</p>
</section>]]></content><author><name>Amir</name></author><summary type="html"><![CDATA[Introduction Have you ever watched "Person of Interest"? It's a show that mixes technology, good and bad, and exciting stories. It's about a super-smart computer, called The Machine, that knows when bad things will happen. This show isn't just fun to watch; it makes you think about important stuff like right and wrong and how tech affects our lives.]]></summary></entry><entry><title type="html">Welcome to SingularVoice: A Journey Through Code and Creativity</title><link href="http://localhost:4000/welcome.html" rel="alternate" type="text/html" title="Welcome to SingularVoice: A Journey Through Code and Creativity" /><published>2023-12-20T09:00:00+03:30</published><updated>2023-12-20T09:00:00+03:30</updated><id>http://localhost:4000/welcom-to-singularvoice</id><content type="html" xml:base="http://localhost:4000/welcome.html"><![CDATA[<section>
    <h2>Hello and Welcome!</h2>
    <p>My name is Amir, and I'm thrilled to welcome you to SingularVoice, a personal blog where I'll be sharing my journey through the fascinating world of software development, technology insights, and the art of balancing code with creativity.</p>
</section>

<section>
    <h2>Who am I?</h2>
    <p>Hi, my name is Amir and I'm a software engineer with a diverse background in both front-end and back-end development. I have experience working with a variety of technologies, including Angular, React Native, and various programming languages. My journey in technology has been a fascinating one, filled with interesting challenges and opportunities for growth. One thing that's really shaped my approach to software engineering is my interest in software architecture and design, which has given me a strong focus on quality and a passion for finding innovative solutions. Overall, I'm proud of the work I've done and excited to continue learning and growing in this ever-evolving field.</p>
</section>

<section>
    <h2>What is SingularVoice?</h2>
    <p>SingularVoice is more than just a blog; it's a narrative of my personal and professional growth in the realm of technology. Here, you'll find a mix of content ranging from technical tutorials and insights into software architecture to discussions on professional soft skills and the ever-evolving landscape of tech.</p>
</section>


<section>
    <h2>What Can You Expect?</h2>
    <ul>
        <li>
            <strong>In-Depth Tutorials:</strong>
            <p>I'll be sharing tutorials that delve into various aspects of software development. Whether you're a beginner or an experienced developer, there's something to learn.</p>
        </li>
        <li>
            <strong>Tech Insights and News:</strong>
            <p>Stay updated with the latest trends in technology. I'll be exploring new tools, languages, and sharing my thoughts on emerging tech news.</p>
        </li>
        <li>
            <strong>Professional Development:</strong>
            <p>            It's not all about code. Soft skills are crucial for success in the tech industry. I'll share tips on effective communication, teamwork, and personal development.</p>
        </li>
    </ul>
</section>

<section>
    <h2>Join Me on This Journey</h2>
    <p>I'm excited to embark on this blogging journey and even more excited to have you join me. Whether you're here to learn, share, or simply read, I welcome you to SingularVoice. Let's explore the vast and dynamic world of technology together.</p>
</section>

<section>
    <h2>Stay Connected</h2>
    <p>You can also follow me on <a href="https://github.com/singularvoice">GitHub</a> or <a href="https://www.linkedin.com/in/a-hassanzadeh-h/">Linkedin</a> for more snippets of my tech life.</p>
</section>

<section>
    <h2>Your Feedback Matters</h2>
    <p>Your thoughts and feedback are incredibly important to me. I warmly welcome your insights, suggestions, and discussion topics via email. Please feel free to reach out to me at <a href="mailto:a.hassanzadeh.h@gmail.com">a.hassanzadeh.h@gmail.com</a> with any thoughts or topics you'd like to see covered in future posts.</p>
    <p>Thank you for visiting SingularVoice. I look forward to embarking on this journey with you and exploring the fascinating world of technology together!</p>
</section>]]></content><author><name>Amir</name></author><summary type="html"><![CDATA[Hello and Welcome! My name is Amir, and I'm thrilled to welcome you to SingularVoice, a personal blog where I'll be sharing my journey through the fascinating world of software development, technology insights, and the art of balancing code with creativity.]]></summary></entry></feed>